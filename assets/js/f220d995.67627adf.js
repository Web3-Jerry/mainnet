"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5444],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(a),c=r,g=m["".concat(l,".").concat(c)]||m[c]||h[c]||p;return a?n.createElement(g,o(o({ref:t},u),{},{components:a})):n.createElement(g,o({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,o=new Array(p);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<p;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3582:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},assets:function(){return u},toc:function(){return h},default:function(){return c}});var n=a(7462),r=a(3366),p=(a(7294),a(3905)),o=["components"],i={sidebar_position:2},l="The Graph",s={unversionedId:"DeveloperResources/TheGraph",id:"DeveloperResources/TheGraph",title:"The Graph",description:"Graph Node is a protocol for building decentralized applications (dApps) quickly on Ethereum and IPFS using GraphQL.",source:"@site/docs/DeveloperResources/TheGraph.md",sourceDirName:"DeveloperResources",slug:"/DeveloperResources/TheGraph",permalink:"/mainnet/docs/DeveloperResources/TheGraph",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Supported Wallets for Bitlayer",permalink:"/mainnet/docs/DeveloperResources/Wallets"},next:{title:"Faucets",permalink:"/mainnet/docs/DeveloperResources/Faucets"}},u={},h=[{value:"Usage",id:"usage",level:2},{value:"The Graph Official",id:"the-graph-official",level:3},{value:"Bitlayer Graph Node",id:"bitlayer-graph-node",level:3},{value:"Project Local Graph Node",id:"project-local-graph-node",level:3},{value:"Set up graph-node",id:"set-up-graph-node",level:4},{value:"Migration",id:"migration",level:3},{value:"Deploying a Subgraph",id:"deploying-a-subgraph",level:2},{value:"Endpoints",id:"endpoints",level:3},{value:"Steps for Deployment",id:"steps-for-deployment",level:3},{value:"Subgraph Configuration Example",id:"subgraph-configuration-example",level:3},{value:"Detailed Subgraph Configuration",id:"detailed-subgraph-configuration",level:3},{value:"Deployment Steps",id:"deployment-steps",level:3}],m={toc:h};function c(e){var t=e.components,a=(0,r.Z)(e,o);return(0,p.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"the-graph"},"The Graph"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"Graph Node")," is a protocol for building decentralized applications (dApps) quickly on Ethereum and IPFS using GraphQL."),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://thegraph.com/"},"Official website")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://github.com/graphprotocol/graph-node"},"Github"))),(0,p.kt)("h2",{id:"usage"},"Usage"),(0,p.kt)("h3",{id:"the-graph-official"},"The Graph Official"),(0,p.kt)("p",null,"The Graph official has not support bitlayer, will coming soon."),(0,p.kt)("h3",{id:"bitlayer-graph-node"},"Bitlayer Graph Node"),(0,p.kt)("p",null,"Self hosting graph node service of Bitlayer is avaiable now.\nPlease contact us via business or ",(0,p.kt)("a",{parentName:"p",href:"https://t.me/bitlayer_developers"},"telegram")," if you need this service."),(0,p.kt)("h3",{id:"project-local-graph-node"},"Project Local Graph Node"),(0,p.kt)("p",null,"We recommend following the ",(0,p.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/"},"Official documentation")," for deployment. The next operation is only intended as a simple setup tutorial for reference."),(0,p.kt)("h4",{id:"set-up-graph-node"},"Set up graph-node"),(0,p.kt)("p",null,"For convenience reasons, we use the official ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/graphprotocol/graph-node/tree/master/docker"},"docker compose")," for node, database, and IPFS deployment.\nNote that the value of the ",(0,p.kt)("inlineCode",{parentName:"p"},"ethereum")," field in ",(0,p.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," is replaced with ",(0,p.kt)("inlineCode",{parentName:"p"},"Bitlayer"),"'s node connection information."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"graph-node:\n    image: graphprotocol/graph-node\n    ports:\n      - '8000:8000'\n      - '8001:8001'\n      - '8020:8020'\n      - '8030:8030'\n      - '8040:8040'\n    depends_on:\n      - ipfs\n      - postgres\n    environment:\n      postgres_host: postgres\n      postgres_user: graph-node\n      postgres_pass: let-me-in\n      postgres_db: graph-node\n      ipfs: 'ipfs:5001'\n      ethereum: 'mainnet:http://127.0.0.1:8545'  #replaced with bitlayer rpc info\n      RUST_LOG: info\n")),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"Note: The node connected to graph-node needs to be in ",(0,p.kt)("inlineCode",{parentName:"p"},"archive")," mode (add flag --syncmode full --gcmode archive when starting the node), we recommend each user to build their own RPC node.")),(0,p.kt)("h3",{id:"migration"},"Migration"),(0,p.kt)("p",null,"You can migrate your subgraph from bitlayer graph node or project local graph node to offical environment when the graph enables bitlayer.\nTo migrate smoothly, please set dataSources.source.startBlock in subgraph.yaml, we suggest using the block in which the contract was created. "),(0,p.kt)("h2",{id:"deploying-a-subgraph"},"Deploying a Subgraph"),(0,p.kt)("p",null,"This guide provides steps for deploying a subgraph using the Bitlayer Graph Node service available on both testnet and mainnet."),(0,p.kt)("h3",{id:"endpoints"},"Endpoints"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Testnet Endpoint")),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"Subgraph Query (GraphQL):")," ",(0,p.kt)("inlineCode",{parentName:"li"},"https://bitlayer-testnet-graph-query.unifra.io")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"Deployment Management (JSON-RPC):")," ",(0,p.kt)("inlineCode",{parentName:"li"},"https://bitlayer-testnet-graph-node.unifra.io/")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"IPFS Node:")," ",(0,p.kt)("inlineCode",{parentName:"li"},"https://bitlayer-testnet-graph-ipfs.unifra.io/")))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Mainnet Endpoint")),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Details for mainnet endpoints will be similar but are not listed here.")))),(0,p.kt)("h3",{id:"steps-for-deployment"},"Steps for Deployment"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Install graph-cli")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add @graphprotocol/graph-cli\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Clone a sample subgraph")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/graphprotocol/graph-tooling.git\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Configure the subgraph")),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Replace the network field in ",(0,p.kt)("inlineCode",{parentName:"li"},"examples/example-subgraph/subgraph.yml")," with ",(0,p.kt)("inlineCode",{parentName:"li"},"BitlayerTestnet"),"."),(0,p.kt)("li",{parentName:"ul"},"Example configuration:",(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-yaml"},"specVersion: 0.0.5\ndescription: 'example of a subgraph'\nrepository: https://github.com/graphprotocol/graph-tooling.git\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: ExampleSubgraph\n    network: BitlayerTestnet\n"))))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Create your subgraph on the graph node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"cd examples/example-subgraph\ngraph create xxxx/subgraph_xx --node=https://bitlayer-testnet-graph-node.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Publish your subgraph to the Graph Node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"graph deploy xxxx/subgraph_xx ./subgraph.yaml --version-label=v1 --node=https://bitlayer-testnet-graph-node.unifra.io --ipfs=https://bitlayer-testnet-graph-ipfs.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Query data from the subgraph using the GraphQL endpoint")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://bitlayer-testnet-graph-query.unifra.io/subgraphs/name/xxxx/subgraph_xx -H "Content-Type: application/json" -d \'{\n  "query": "query { exampleEntities(first: 100) {id } _meta { block {number, hash} } }"\n}\'\n')))),(0,p.kt)("p",null,"This procedure outlines how to deploy and manage subgraphs on the Bitlayer Graph Node service, making full use of the available testnet resources."),(0,p.kt)("h3",{id:"subgraph-configuration-example"},"Subgraph Configuration Example"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-yaml"},"specVersion: 0.0.5\ndescription: 'example of a subgraph'\nrepository: https://github.com/graphprotocol/graph-tooling.git\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: ExampleSubgraph\n    network: BitlayerTestnet\n    source:\n      address: '0x22843e74c59580b3eaf6c233fa67d8b7c561a835'\n      abi: ExampleContract\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.7\n      language: wasm/assemblyscript\n      file: ./src/mapping.ts\n      entities:\n        - ExampleEntity\n        - OtherEntity\n      abis:\n        - name: ExampleContract\n          file: ./abis/ExampleContract.json\n      eventHandlers:\n        - event: ExampleEvent(indexed string)\n          handler: handleExampleEvent\n")),(0,p.kt)("h3",{id:"detailed-subgraph-configuration"},"Detailed Subgraph Configuration"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-yaml"},"specVersion: 0.0.5\ndescription: 'example of a subgraph'\nrepository: https://github.com/graphprotocol/graph-tooling.git\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: ExampleSubgraph\n    network: BitlayerTestnet\n    source:\n      address: '0x22843e74c59580b3eaf6c233fa67d8b7c561a835'\n      abi: ExampleContract\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.7\n      language: wasm/assemblyscript\n      file: ./src/mapping.ts\n      entities:\n        - ExampleEntity\n        - OtherEntity\n      abis:\n        - name: ExampleContract\n          file: ./abis/ExampleContract.json\n      eventHandlers:\n        - event: ExampleEvent(indexed string)\n          handler: handleExampleEvent\n")),(0,p.kt)("h3",{id:"deployment-steps"},"Deployment Steps"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Install graph-cli")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add @graphprotocol/graph-cli\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Clone a sample subgraph")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/graphprotocol/graph-tooling.git\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Replace the network field in the subgraph configuration"),"\nNavigate to ",(0,p.kt)("inlineCode",{parentName:"p"},"examples/example-subgraph")," and update ",(0,p.kt)("inlineCode",{parentName:"p"},"subgraph.yml")," with ",(0,p.kt)("inlineCode",{parentName:"p"},"BitlayerTestnet"),".")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Create your subgraph on the graph node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"graph create xxxx/subgraph_xx --node=https://bitlayer-testnet-graph-node.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Publish your subgraph to the Graph Node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"graph deploy xxxx/subgraph_xx ./subgraph.yaml --version-label=v1 --ipfs=https://bitlayer-testnet-graph-ipfs.unifra.io/ --node=https://bitlayer-testnet-graph-node.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Query data from your subgraph using the GraphQL endpoint")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://bitlayer-testnet-graph-query.unifra.io/subgraphs/name/xxxx/subgraph_xx -H "Content-Type: application/json" -d \'{\n  "query": "query { exampleEntities(first: 100) {id } _meta { block {number, hash} } }"\n}\'\n')))))}c.isMDXComponent=!0}}]);