"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[800],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6039:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={sidebar_position:5},s="JSON-RPC",c={unversionedId:"BitlayerNetwork/Json-RPC",id:"BitlayerNetwork/Json-RPC",title:"JSON-RPC",description:"Bitlayer provides all JSON-RPC API methods listed on Ethereum along with several custom methods.",source:"@site/docs/BitlayerNetwork/Json-RPC.md",sourceDirName:"BitlayerNetwork",slug:"/BitlayerNetwork/Json-RPC",permalink:"/mainnet/docs/BitlayerNetwork/Json-RPC",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Bridges",permalink:"/mainnet/docs/BitlayerNetwork/Bridges"},next:{title:"Developer Resources",permalink:"/mainnet/docs/category/developer-resources"}},p={},u=[{value:"eth_getTraceActionByTxHash",id:"eth_gettraceactionbytxhash",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"eth_getTraceActionByBlockNumber",id:"eth_gettraceactionbyblocknumber",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Example",id:"example-1",level:3},{value:"eth_getTraceActionByBlockHash",id:"eth_gettraceactionbyblockhash",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Example",id:"example-2",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"json-rpc"},"JSON-RPC"),(0,l.kt)("p",null,"Bitlayer provides all JSON-RPC API methods listed on ",(0,l.kt)("a",{parentName:"p",href:"https://ethereum.org/developers/docs/apis/json-rpc#json-rpc-methods"},"Ethereum")," along with several custom methods."),(0,l.kt)("h2",{id:"eth_gettraceactionbytxhash"},"eth_getTraceActionByTxHash"),(0,l.kt)("p",null,"This method returns logs of internal transactions by the hash of a transaction."),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DATA"),", 32 Bytes: Hash of a transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Object"),": Filter options:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fromUser"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA|Array"),", 20 Bytes (optional) - Address of the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"toBlock"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA|Array"),", 20 Bytes (optional) - Address of the receiver."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"opCode"),": String (optional) - An EVM opcode for a transaction's log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"minValue"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY|TAG")," (optional) - The minimal value or amount transferred in BRC.")))),(0,l.kt)("h3",{id:"returns"},"Returns"),(0,l.kt)("p",null,"An object containing an internal transaction's log, or ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," if no log was found:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transactionHash"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA"),", 32 Bytes - Hash of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blockHash"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA"),", 32 Bytes - Hash of the block (null if pending)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blockNumber"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY")," - Block number of the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"logs"),": Array of log objects generated by the transaction:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA"),", 20 Bytes - Address of the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA"),", 20 Bytes - Address of the receiver (null if it's a contract creation transaction)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY")," - Value transferred in BRC."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"success"),": Boolean - Indicates whether the call was successful."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"opcode"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA")," - The EVM opcode of the transaction's log."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"depth"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY")," - The depth of the call stack in EVM."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY")," - Gas provided by the sender."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gas_used"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY")," - Amount of gas used by the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"DATA")," - Data sent along with the transaction."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"trace_address"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"QUANTITY|Array")," - Array representing the call trace depth during execution.")))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"Request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST --data \'{  "jsonrpc":"2.0",  "method":"eth_getTraceActionByTxHash",  "params":["0xce9a42b2d2e0c0a7984d9351793129b91dc0599b9b4401082b75afcbc6abd694"], "id":1}\'\n')),(0,l.kt)("p",null,"Response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 1,\n  "jsonrpc": "2.0",\n  "result": [\n    {\n      "transactionHash": "0xce9a42b2d2e0c0a7984d9351793129b91dc0599b9b4401082b75afcbc6abd694",\n      "blockHash": "0x80f5779b0348102d90f5463a9a494b7454d0e1f8d8b119cf090cd90e2d6105c3",\n      "blockNumber": 54,\n      "logs": [\n        {\n          "from": "0x2e46771cff3636a42f363826ff8a94d3a738e075",\n          "to": "0x000000000000000000000000000000000000f000",\n          "value": 0,\n          "success": true,\n          "opcode": "CALL",\n          "depth": 18446744073709551615,\n          "gas": 165629,\n          "gas_used": 162996,\n          "input": "0x6374299e0000000000000000000000009f01eb5eb4dbea8b2cecc679050819990ab68a1a000000000000000000000000000000000000000000295be96e64066972000000",\n          "trace_address": []\n        },\n        {\n          "from": "0x000000000000000000000000000000000000f000",\n          "to": "0x4b20bbf3652696b9afd27b8f88ff8b7c1f361336",\n          "value": 0,\n          "success": true,\n          "opcode": "STATICCALL",\n          "depth": 0,\n          "gas": 157800,\n          "gas_used": 2443,\n          "input": "0x00000000",\n          "output": "0x0000000000000000000000002e46771cff3636a42f363826ff8a94d3a738e075",\n          "trace_address": [\n            0\n          ]\n        },\n        {\n          "from": "0x000000000000000000000000000000000000f000",\n          "to": "0xf4340cf5f3891a3827713b33f769b501a0b5b122",\n          "value": 0,\n          "success": true,\n          "opcode": "STATICCALL",\n          "depth": 0,\n          "gas": 150040,\n          "gas_used": 2814,\n          "input": "0x0000000000000000000000000000000000000000007c13bc4b2c133c560000000000000000000000000000000000000000000000007c13bc4b2c133c5600000000000000",\n          "output": "0x0000000000000000000000000000000000000000007c13bc4b2c133c56000000",\n          "trace_address": [\n            1\n          ]\n        }\n      ]\n    }\n  ]\n}\n')),(0,l.kt)("h2",{id:"eth_gettraceactionbyblocknumber"},"eth_getTraceActionByBlockNumber"),(0,l.kt)("p",null,"Returns logs of internal transactions by block number."),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"QUANTITY|TAG - integer of a block number")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Object - The filter options:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"fromUser: DATA|Array, 20 Bytes - (optional) address of the sender. "),(0,l.kt)("li",{parentName:"ul"},"toBlock: DATA|Array, 20 Bytes - (optional) address of the receiver. "),(0,l.kt)("li",{parentName:"ul"},"opCode: String - (optional) An EVM opcode for a transaction's log. "),(0,l.kt)("li",{parentName:"ul"},"minValue: QUANTITY|TAG - (optional) the minimal value or amount transferred in BRC.")))),(0,l.kt)("h3",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#returns"},"eth_getTraceActionByTxHash")),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("p",null,"Request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST --data \'{  "jsonrpc":"2.0",  "method":"eth_getTraceActionByBlockNumber",  "params":["0x36"],  "id":1}\'\n')),(0,l.kt)("p",null,"Result see ",(0,l.kt)("a",{parentName:"p",href:"#example"},"eth_getTraceActionByTxHash")),(0,l.kt)("h2",{id:"eth_gettraceactionbyblockhash"},"eth_getTraceActionByBlockHash"),(0,l.kt)("p",null,"Returns logs of internal transactions by block hash."),(0,l.kt)("h3",{id:"parameters-2"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"DATA, 32 Bytes - Hash of a block.")),(0,l.kt)("h3",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#returns"},"eth_getTraceActionByTxHash")),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)("p",null,"Request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST --data \'{  "jsonrpc":"2.0",  "method":"eth_getTraceActionByBlockHash",  "params":["0x80f5779b0348102d90f5463a9a494b7454d0e1f8d8b119cf090cd90e2d6105c3"],  "id":1}\'\n')),(0,l.kt)("p",null,"Result see ",(0,l.kt)("a",{parentName:"p",href:"#example"},"eth_getTraceActionByTxHash")))}m.isMDXComponent=!0}}]);