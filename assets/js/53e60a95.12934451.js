"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6746],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=s(a),c=r,h=g["".concat(l,".").concat(c)]||g[c]||m[c]||p;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,i=new Array(p);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<p;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},7487:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},assets:function(){return u},toc:function(){return m},default:function(){return c}});var n=a(7462),r=a(3366),p=(a(7294),a(3905)),i=["components"],o={sidebar_position:3},l="Deploying a Subgraph",s={unversionedId:"DeveloperResources/DeployingSubgraph",id:"DeveloperResources/DeployingSubgraph",title:"Deploying a Subgraph",description:"This guide provides steps for deploying a subgraph using the Bitlayer Graph Node service available on both testnet and mainnet.",source:"@site/docs/DeveloperResources/DeployingSubgraph.md",sourceDirName:"DeveloperResources",slug:"/DeveloperResources/DeployingSubgraph",permalink:"/mainnet/docs/DeveloperResources/DeployingSubgraph",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Block Explorers",permalink:"/mainnet/docs/DeveloperResources/Block Explorers"},next:{title:"Faucets",permalink:"/mainnet/docs/DeveloperResources/Faucets"}},u={},m=[{value:"Endpoints",id:"endpoints",level:2},{value:"Steps for Deployment",id:"steps-for-deployment",level:2},{value:"Subgraph Configuration Example",id:"subgraph-configuration-example",level:2},{value:"Detailed Subgraph Configuration",id:"detailed-subgraph-configuration",level:2},{value:"Deployment Steps",id:"deployment-steps",level:2}],g={toc:m};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,p.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"deploying-a-subgraph"},"Deploying a Subgraph"),(0,p.kt)("p",null,"This guide provides steps for deploying a subgraph using the Bitlayer Graph Node service available on both testnet and mainnet."),(0,p.kt)("h2",{id:"endpoints"},"Endpoints"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Testnet Endpoint")),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"Subgraph Query (GraphQL):")," ",(0,p.kt)("inlineCode",{parentName:"li"},"https://bitlayer-testnet-graph-query.unifra.io")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"Deployment Management (JSON-RPC):")," ",(0,p.kt)("inlineCode",{parentName:"li"},"https://bitlayer-testnet-graph-node.unifra.io/")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"IPFS Node:")," ",(0,p.kt)("inlineCode",{parentName:"li"},"https://bitlayer-testnet-graph-ipfs.unifra.io/")))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Mainnet Endpoint")),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Details for mainnet endpoints will be similar but are not listed here.")))),(0,p.kt)("h2",{id:"steps-for-deployment"},"Steps for Deployment"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Install graph-cli")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add @graphprotocol/graph-cli\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Clone a sample subgraph")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/graphprotocol/graph-tooling.git\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Configure the subgraph")),(0,p.kt)("ul",{parentName:"li"},(0,p.kt)("li",{parentName:"ul"},"Replace the network field in ",(0,p.kt)("inlineCode",{parentName:"li"},"examples/example-subgraph/subgraph.yml")," with ",(0,p.kt)("inlineCode",{parentName:"li"},"BitlayerTestnet"),"."),(0,p.kt)("li",{parentName:"ul"},"Example configuration:",(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-yaml"},"specVersion: 0.0.5\ndescription: 'example of a subgraph'\nrepository: https://github.com/graphprotocol/graph-tooling.git\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: ExampleSubgraph\n    network: BitlayerTestnet\n"))))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Create your subgraph on the graph node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"cd examples/example-subgraph\ngraph create xxxx/subgraph_xx --node=https://bitlayer-testnet-graph-node.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Publish your subgraph to the Graph Node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"graph deploy xxxx/subgraph_xx ./subgraph.yaml --version-label=v1 --node=https://bitlayer-testnet-graph-node.unifra.io --ipfs=https://bitlayer-testnet-graph-ipfs.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Query data from the subgraph using the GraphQL endpoint")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://bitlayer-testnet-graph-query.unifra.io/subgraphs/name/xxxx/subgraph_xx -H "Content-Type: application/json" -d \'{\n  "query": "query { exampleEntities(first: 100) {id } _meta { block {number, hash} } }"\n}\'\n')))),(0,p.kt)("p",null,"This procedure outlines how to deploy and manage subgraphs on the Bitlayer Graph Node service, making full use of the available testnet resources."),(0,p.kt)("h2",{id:"subgraph-configuration-example"},"Subgraph Configuration Example"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-yaml"},"specVersion: 0.0.5\ndescription: 'example of a subgraph'\nrepository: https://github.com/graphprotocol/graph-tooling.git\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: ExampleSubgraph\n    network: BitlayerTestnet\n    source:\n      address: '0x22843e74c59580b3eaf6c233fa67d8b7c561a835'\n      abi: ExampleContract\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.7\n      language: wasm/assemblyscript\n      file: ./src/mapping.ts\n      entities:\n        - ExampleEntity\n        - OtherEntity\n      abis:\n        - name: ExampleContract\n          file: ./abis/ExampleContract.json\n      eventHandlers:\n        - event: ExampleEvent(indexed string)\n          handler: handleExampleEvent\n")),(0,p.kt)("h2",{id:"detailed-subgraph-configuration"},"Detailed Subgraph Configuration"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-yaml"},"specVersion: 0.0.5\ndescription: 'example of a subgraph'\nrepository: https://github.com/graphprotocol/graph-tooling.git\nschema:\n  file: ./schema.graphql\ndataSources:\n  - kind: ethereum/contract\n    name: ExampleSubgraph\n    network: BitlayerTestnet\n    source:\n      address: '0x22843e74c59580b3eaf6c233fa67d8b7c561a835'\n      abi: ExampleContract\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.7\n      language: wasm/assemblyscript\n      file: ./src/mapping.ts\n      entities:\n        - ExampleEntity\n        - OtherEntity\n      abis:\n        - name: ExampleContract\n          file: ./abis/ExampleContract.json\n      eventHandlers:\n        - event: ExampleEvent(indexed string)\n          handler: handleExampleEvent\n")),(0,p.kt)("h2",{id:"deployment-steps"},"Deployment Steps"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Install graph-cli")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add @graphprotocol/graph-cli\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Clone a sample subgraph")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/graphprotocol/graph-tooling.git\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Replace the network field in the subgraph configuration"),"\nNavigate to ",(0,p.kt)("inlineCode",{parentName:"p"},"examples/example-subgraph")," and update ",(0,p.kt)("inlineCode",{parentName:"p"},"subgraph.yml")," with ",(0,p.kt)("inlineCode",{parentName:"p"},"BitlayerTestnet"),".")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Create your subgraph on the graph node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"graph create xxxx/subgraph_xx --node=https://bitlayer-testnet-graph-node.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Publish your subgraph to the Graph Node")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"graph deploy xxxx/subgraph_xx ./subgraph.yaml --version-label=v1 --ipfs=https://bitlayer-testnet-graph-ipfs.unifra.io/ --node=https://bitlayer-testnet-graph-node.unifra.io/\n"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("strong",{parentName:"p"},"Query data from your subgraph using the GraphQL endpoint")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://bitlayer-testnet-graph-query.unifra.io/subgraphs/name/xxxx/subgraph_xx -H "Content-Type: application/json" -d \'{\n  "query": "query { exampleEntities(first: 100) {id } _meta { block {number, hash} } }"\n}\'\n')))))}c.isMDXComponent=!0}}]);